// script to build the env.js file at build time

import fs from 'node:fs';
import path from 'node:path';
import { fileURLToPath, pathToFileURL } from 'node:url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);


/**
 * expects a <environment>.env.js file in the root directory, generated by gh actions
 * replaces the env.js file in the dist directory with the new env.js file
 * should happen before after building but before serving the already built dist directory
 * @param {*} environment should be gh commit hash
 */

const environment = process.argv[2];

if (!environment) {
    console.error('Missing environment argument. Usage: node scripts/replaceEnv.js <environment>');
    process.exit(1);
}

const projectRoot = path.resolve(__dirname, '..');
const envFilename = `${environment}.env.js`;

// Try multiple locations for convenience
const candidatePaths = [
    path.join(projectRoot, envFilename),
    path.join(__dirname, envFilename),
];

const envFilePath = candidatePaths.find((candidate) => fs.existsSync(candidate));

if (!envFilePath) {
    console.error(`Could not find env file. Tried: ${candidatePaths.join(', ')}`);
    process.exit(1);
}

const envModule = await import(pathToFileURL(envFilePath).href);
const envObject = envModule?.default ?? envModule?.env ?? {};

const distEnvPath = path.join(projectRoot, 'dist', 'env.js');
fs.mkdirSync(path.dirname(distEnvPath), { recursive: true });

fs.writeFileSync(
    distEnvPath,
    `(function () {
    window.__ENV__ = Object.freeze(${JSON.stringify(envObject)});
})();
`
);
